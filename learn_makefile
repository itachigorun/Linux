include<filelist.mk>    #类似于C语言的引用，可以加绝对路径

#一个文件只应该有一个最终目标，第一个目标会成为最终目标
#makefile支持"~"、"*"、"？"符号
cc = gcc                #使用的编译器
program = programname   #得到的程序名
deps = filename.h       #需要用到的头文件，不加这个头文件改变，makefile无法得知
objects = a.o b.o c.o d.o\        #目标文件
		e.o f.o g.o              #换行必须tab缩进
#deps = $(shell find ./ -name "*.h")   可以配置	函数
#src = $(shell find ./ -name "*.c")
#obj = $(src:%.c=%.o)     $(src:%.c=%.o)则是一个字符替换函数，它会将src所有的.c字串替换成.o，实际上就等于列出了所有.c文件要编译的结果

$(program) : $(objects)   #program称为目标，冒号后面的称为依赖关系，只要一个文件发生了改变，就会触发语句的第三部分
	$(cc) -o $(program) $(objects)  
	
%.o : %.c $(deps)         #表示所有的.o文件都依赖于其同名的.c文件，还有头文件
	$(cc) -c $(objects)  

#a.o: a.c a.h  当有.c文件不是包含所有头文件就用这个
#	$(cc) -c a.c



#.PHONY声明一个伪目标，伪目标并不是一个文件，只是一个标签
.PHONY : clean
clean :
	rm $(objects) $(program)

# make会把其要执行的命令行在执行前输出到屏幕上，@字符在命令前，那么这个命令将不会被make显示出来
@echo 输出注释
#输出
输出注释
#如果去掉@
echo 输出注释
#执行make后会输出
echo 输出注释
输出注释

#“all”              这个伪目标是所有目标的目标，其功能一般是编译所有的目标。
#“clean”       这个伪目标功能是删除所有被make创建的文件。
#“install”       这个伪目标功能是安装已编译好的程序，其实就是把目标执行文件拷贝到指定的目标中去。
#“print”         这个伪目标的功能是例出改变过的源文件。
#“tar”             这个伪目标功能是把源程序打包备份。也就是一个tar文件。
#“dist”           这个伪目标功能是创建一个压缩文件，一般是把tar文件压成Z文件。或是gz文件。
#“TAGS”        这个伪目标功能是更新所有的目标，以备完整地重编译使用。
#“check”和“test”    这两个伪目标一般用来测试makefile的流程。
