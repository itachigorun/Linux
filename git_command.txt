# itachigorun 
# 2017-06-24


忽略文件
$ cat .gitignore

#ignore .a files and .o files
*.[oa]
# ignore ~file
*~
# but do track lib.a, even though you're ignoring .a files above
!lib.a
# only ignore the TODO file in the current directory, not subdir/TODO
/TODO
# ignore all files in the build/ directory
build/
# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt
# ignore all .pdf files in the doc/ directory
doc/**/*.pdf


git help (config)                                         #git使用帮助/特定命令
git init                                                  # 初始化本地git仓库（创建新仓库）
git config --global user.name "xxx"                       # 配置用户名
git config --global user.email "xxx@xxx.com"              # 配置邮件
git config --global color.ui true                         # git status等命令自动着色
git config --global color.status auto
git config --global color.diff auto
git config --global color.branch auto
git config --global color.interactive auto
git config --global --unset http.proxy                    # remove  proxy configuration on git
git clone git@github.com:itachigorun/Linux.git newname    # clone远程仓库/重命名
git status   -s/short                                     # 查看当前版本状态/简洁显示
git add file/floder                                       # 添加文件/文件夹下的所有文件至index
git add .                                                 # 增加/当前子目录下所有更改过的文件至index
git commit -m 'edit log'                                  # 提交
git commit --amend -m 'edit log'                          # 合并上一次提交（用于反复修改）
git commit -am 'edit log'                                 # 将add和commit合为一步
git rm file                                               # 删除index中的文件并在磁盘上也删除
git rm -r *                                               # 递归删除
git rm --cached file                                      # 删除文件但保留在磁盘上
git rm log/\*.log                                         # 删除log文件夹下.log的所有文件
git log                                                   # 显示提交日志
git log -5                                                # 显示1行日志 -n为n行
git log --stat                                            # 显示每次更新的文件修改统计信息
git log -p -n                                             # 按补丁格式显示每个更新之间的差异
git log --pretty=oneline                                  # 将每次提交内容放在一行显示
git log --pretty=format:"%h - %an, %ad, %ar : %s"         # 定制显示格式
git log --pretty=format:"%h %s" --graph                   # 添加了一些ASCII字符串来形象地展示分支、合并历史
git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容
git show dfb02                                            # 可只用commitid的前几位
git show HEAD                                             # 显示HEAD提交日志
git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本
git tag                                                   # 显示已存在的tag
git tag -a v2.0 -m 'xxx'                                  # 增加v2.0的tag
git show v2.0                                             # 显示v2.0的日志及详细内容
git log v2.0                                              # 显示v2.0的日志
git diff  branch/filename                                 # 显示所有未添加至index的变更,未add
git diff --cached                                         # 显示所有已添加index但还未commit的变更，已经add未commit
git diff HEAD                                             # 查看工作目录同最近一次commit的内容差异
git diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异
git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的
git diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容
git remote                                                # 列出指定的每一个远程服务器的简写
git remote -v                                             # 显示需要读写远程仓库使用的Git保存的简写与其对应的URL
git remote show origin                                    # 查看一个远程仓库的详细信息
git remote add origin git@github.com:itachigorun/Linux.git# 增加远程定义（用于push/pull/fetch）
git remmote rename namea nameb                            # 重命名远程仓库
git remote rm name                                        # 移除一个远程仓库
git branch                                                # 显示本地分支列表
git branch -v                                             # 查看每一个分支的最后一个提交
git branch name                                           # 创建分支
git branch --contains 50089                               # 显示包含提交50089的分支
git branch -a                                             # 显示所有分支
git branch -r                                             # 显示所有原创分支
git branch --merged                                       # 显示所有已合并到当前分支的分支
git branch --no-merged                                    # 显示所有未合并到当前分支的分支
git branch -m master master_copy                          # 本地分支改名
git branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）,当前HEAD不能指向该分支
git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933
git checkout HEAD                                         # 撤销所有修改，回到上一个commit
git checkout HEAD^2                                       # 提交层面,回退两个版本，回退后这两个版本会被丢弃,会修改commit历史
git checkout master_copy                                  # 切换到另一个分支,当前分支的缓存区,工作区信息会丢失
git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出
git checkout -b master master_copy                        # 上面的完整版
git checkout features/performance                         # 检出已存在的features/performance分支
git checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支
git checkout file                                         # 取消对文件的修改,修改工作区
git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出
git checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）
git merge origin/master                                   # 合并远程master分支至当前分支
git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改
git push origin master                                    # 将当前分支push到远程master分支
git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支
git push --tags                                           # 把所有tag推送到远程仓库
git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）
git fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支
git pull origin master                                    # 获取远程分支master并merge到当前分支
git mv README README2                                     # 重命名文件README为README2
git reset HEAD                                            # 重置为HEAD,撤销所有暂存区的文件到工作区,工作区不受影响
git reset file                                            # 重置为HEAD,撤销暂存区的文件到工作区
git reset HEAD^                                           # 重置为上一个版本，当前这个commit、暂存区会被遗弃,工作区不变
git reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）,重置暂存区和工作区
git rebase  master                                        # 变基使代码记录更整洁，将当前分支变基到master
git ls-files                                              # 列出git index包含的文件
git show-branch                                           # 图示当前分支历史
git show-branch --all                                     # 图示所有分支历史
git whatchanged                                           # 显示提交历史对应的文件修改
git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818
git revert HEAD                                           # 撤销当前提交，然后需要重新commit,不修改commit历史
git ls-tree HEAD                                          # 内部命令：显示某个git对象
git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH
git reflog                                                # 显示所有提交，包括孤立节点,显示本地执行过的git命令
git show HEAD@{5}
git show master@{yesterday}                               # 显示master分支昨天的状态
git log --pretty=format:'%h %s' --graph                   # 图示提交日志
git show HEAD~e
git show -s --pretty=raw 2be7fcb476
git stash                                                 # 暂存当前修改，将所有至为HEAD状态
git stash list                                            # 查看所有暂存
git stash show -p stash@{0}                               # 参考第一次暂存
git stash apply stash@{0}                                 # 应用第一次暂存
git stash pop                                             # 回到最后一个stash的状态,病删除这个状态
git stash clear                                           # 删除所有的stash
git grep "delete from"                                    # 文件中搜索文本“delete from”
git grep -e '#define' --and -e SORT_DIRENT
git gc
git fsck
git reset --mixed HEAD                                    # 回退到之前的一次commit,将当前的改动从缓存区中移除，但是这些改动还留在工作目录中
git reset	                                              # 提交层面	在私有分支上舍弃一些没有提交的更改
git reset	                                              # 文件层面	将文件从缓存区中移除
git checkout	                                          # 提交层面	切换分支或查看旧版本
git checkout	                                          # 文件层面	舍弃工作目录中的更改
git revert                                                # 提交层面	在公共分支上回滚更改
git revert	                                              # 文件层面	（然而并没有）
git blame <file-name>                                     # 查看行代码是谁写的
git whatchanged --since='2 weeks ago'                     # 查看两个星期内的改动


git add -A  提交所有变化
git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)
git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件

git commit -am file "修改记录"   
等同于
1.git add -a file
2.git commit -m "修改记录"

如何将本地新建仓库上传到github
1.github中新建仓库
2.本地仓库：
git init
git add -A
git commit -m '提交的说明注释'
git commit只是提交到本地的仓库，远程仓库并无影响
3.github上创建repo
4.添加远程地址：
git remote add origin git@github.com:itachigorun/test.git
5.将github仓库里到文件拉下来(readme文件)
git pull origin master 
6.上传仓库
git push origin master


如何搭建git服务器
1.服务器
第一步，安装git：
$ sudo apt-get install git
第二步，创建一个git用户，用来运行git服务：
$ sudo adduser git
第三步，创建证书登录：
收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。
第四步，初始化Git仓库：
先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：
$ sudo chown -R git:git sample.git
第五步，禁用shell登录：
出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
git:x:1001:1001:,,,:/home/git:/bin/bash
改为：
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。
第六步，克隆远程仓库：
现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：
$ git clone git@server:/srv/sample.git
Cloning into 'sample'...
warning: You appear to have cloned an empty repository.
