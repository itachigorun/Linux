git checkout -b <分支名>   创建dev分支，然后切换到dev分支,git checkout
                           命令加上-b参数表示创建并切换，相当于以下两条命令

git branch <分支名>        创建分支  
git checkout <分支名>      切换分支     


git branch                 查看当前分支

git merge <分支名>         用于合并指定分支到当前分支
git merge --no-ff -m "信息" <分支名>

git branch -d <分支名>     删除分支 因为创建、合并和删除分支非常快，
                           所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，
                           这和直接在master分支上工作效果是一样的，但过程更安全。


git log --graph            命令可以看到分支合并图
git log --graph --pretty=oneline --abbrev-commit   命令可以看到分支合并图
git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit



git stash                  把当前工作现场“储藏”起来，等以后恢复现场后继续工作
git stash list             查看储存的工作线程
git stash apply            恢复工作线程，可以恢复到指定stash，但是恢复后，
                           stash内容并不删除需要用git stash drop来删除

git stash pop              恢复的同时把stash内容也删


git branch -D <name>       强行删除，丢弃一个没有被合并过的分支
Raw
 git命令
repository 版本库又名仓库

working directory 工作目录 

stage（或者叫index） 暂存区

在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

未添加过的文件是Untracked files状态。

100644对象的模式（普通文件，644权限)。


git diff             #是工作区(work dict)和暂存区(stage)的比较
git diff --cached    #是暂存区(stage)和分支(master)的比较

命令git checkout -- <文件名> 意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- <文件名>。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <文件名>，就回到了场景1，第二步按场景1操作。





mkdir                        创建文件夹
pwd                          显示当前目录
git init                     初始化一个Git仓库，把这个目录变成Git可以管理的仓库

ls -ah                       查看.git目录

git add <文件名>             把文件添加到仓库，可以多次add不同的文件，然后commit一次提交
git commit -m "提交说明"     把文件提交到仓库，-m后面输入的是本次提交的说明
git status                   仓库当前的状态
git diff                     查看上一次的修改,是工作区(work dict)和暂存区(stage)的比较
git diff HEAD -- <文件名>    查看工作区和版本库里面最新版本的区别
git diff --cached            是暂存区(stage)和分支(master)的比较
git log                      可以查看提交历史，以便确定要回退到哪个版本
git log --pretty=oneline     简约显示从最近到最远的提交日志
git reset --hard HEAD        HEAD指向的版本就是当前版本，显示当前版本
git reset --hard HEAD^       回退到上一个版本
git reset --hard 3628164     回退到指定版本
git reflog                   查看命令历史，以便确定要回到未来的哪个版本

git checkout -- <文件名>     可以丢弃工作区的修改
git reset HEAD <文件名>      可以把暂存区的修改撤销掉（unstage），重新放回工作区

rm <文件名>                  删除文件
git rm <文件名>              从版本库中删除该文件，并且后面需要git commit

                             文件删错了，版本库里还有可以很轻松地把误删的文件恢复到最新版本git checkout -- <文件名> 

ls                           显示当前目录下文件

Raw
 git远程仓库
git remote add origin git@server-name/repo-name.git     要关联一个远程库

git push -u origin master                               第一次推送master分支的所有内容

git push origin master                                  推送最新修改,也可推送其他分支

git clone git@server-name/repo-name.git                 从github克隆一个本地库


git remote                                              查看远程库的信息
git remote -v                                           显示远程库更详细的信息



git tag <name>                                          打一个新标签
git tag <name> <commitId>
git tag -a <name> -m "消息" <commitId>

git show <tagname>                                      查看标签信息

git tag -d <name>                                       删除标签
git push origin <name>                                  送某个标签到远程
git push origin --tags                                  一次性推送全部尚未推送到远程的本地标签
git push origin :refs/tags/<name>                       删除远程标签，首先删除本地标签


初始化git 仓库

    git init
把文件修改添加到暂存区

git add test.txt test2.txt

把暂存区的所有内容提交到当前分支。

git commit -m '添加了两个文件'

修改文件后，查看状态

git status

查看具体修改了什么内容(之后，就可以放心的add和commit了)

git diff test2.txt

查看修改提交记录

git log --pretty=oneline

版本回退（git commit后，想要撤销）

当前版本HEAD，上一个版本就是HEAD^，上上一个版本就是HEAD^^,也可以加上版本号

git reset --hard HEAD^ git reset --hard commit_id

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

git reflog

撤销修改

可以把暂存区的修改撤销掉（unstage），重新放回工作区。(git add后，想要撤销)

git reset HEAD test.txt

可以丢弃工作区的修改

git checkout -- test.txt

删除文件（在工作区删除了一个文件后）

版本库中删除该文件，那就用命令git rm删掉，并且git commit：

git rm test.txt git commit -m "remove test.txt"

删错了工作区的文件，版本库里还有，所以要把误删的文件恢复到最新版本：

git checkout -- test.txt

配置git用户名

git config --global user.name "xxx" git config --global user.email "xxxx@gmail.com"

创建SSH key

ssh-keygen -t rsa -C "youremail@example.com"

关联本地库和github远程仓库

git remote add origin git@github.com:example/learngit.git

第一次使用加上了-u参数，是推送内容并关联分支推送成功后就可以看到远程和本地的内容一模一样,在此之前一定要git add和git commit ,否则会报错

git push -u origin master  
// 如果远程仓库有文件和本地仓库不统一，上面这条命令就会出错，这是可以通过以下几种方式解决

// 1. 强制提交 -- 这样会使远程的修改丢失，一般是不可取的，尤其是多人协作开发的时候。
git push -u origin master -f 

// 2. push前先将远程repository修改pull下来,然后在提交
git pull origin master
git push -u origin master

// 3. 若不想merge远程和本地修改，可以先创建新的分支，然后push
git branch [name]
git push -u origin [name]
下次只要本地作了提交，就可以通过命令： git push origin master

先创建远程库，然后，从远程库克隆。

git clone git@github.com:example/test.git

创建分支

git branch dev           创建分支dev
git branch               列出所有分支，当前分支前面会标一个*号
git checkout dev         切换到dev分支
git checkout -b dev      创建并切换到dev分支
合并分支

在dev分支上，修改了代码，并且commit了之后，想要合并到master分支

git checkout master
git merge dev            合并指定分支到当前分支
git branch -d dev        合并完成后，就可以放心地删除dev分支了
创建本地分支develop后,推送至远程，并添加远程develop

git branch -d develop 
git push --set-upstream origin develop
当两个分支都对同一文件作了修改，合并分支时就会产生冲突，需要进入到文件修改冲突部分，再次add&&commit

使用下列命令查看分支的合并情况

git log --graph --pretty=oneline --abbrev-commit

合并分支时，强制禁用Fast forward模式

Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息

git merge --no-ff -m "merge with no-ff" dev

临时Bug分支

# Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
git stash

# 首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支
git checkout master
git checkout -b issue-101

# 修复完成后，提交
git add readme.txt
git commit -m "fix bug 101"

# 切换到master分支
git checkout master
git merge --no-ff -m "merged bug fix 101" issue-101
git branch -d issue-101

# 切换到dev分支，继续未完成的工作
git checkout dev

# 查看之前的工作现场
git stash list

# 恢复工作现场的同时把stash内容也删了（git stash apply不会删除stash内容）
git stash pop

## 多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
git stash apply stash@{0}


查看远程库的信息（-v 详细信息）

git remote git remote -v

推送分支(把本地的dev分支推送到远程origin 库)

git push origin dev

    #创建远程origin的dev分支到本地
    git checkout -b dev origin/dev
    
    # 在dev上继续修改，然后，时不时地把dev分支push到远程：
    git commit -m "xxxxxx"
    git push origin dev
    
    # 当两人同时对dev上的文件做出了修改，commit后,push就会出现冲突，此时就应该使用git pull把最新的提交从origin/dev抓下来
    git pull
    
    # 如果使用git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，
    # 根据提示，设置dev和origin/dev的链接,再pull
    git branch --set-upstream dev origin/dev
    git pull
    
    # 如果有冲突，要先处理冲突,再push
    git push origin dev
#####创建标签 git tag v1.0

回退版本

git revert HEAD                 # 撤销前一次 commit
git revert HEAD^                # 撤销前前一次 commit
git revert commit     #（比如：fa042ce57ebbe5bb9c8db709f719cec2c58ee7ff）撤销指定的版本，撤销也会作为一次提交进行保存。

git reset commit    #（比如：fa042ce57ebbe5bb9c8db709f719cec2c58ee7ff） 回退到指定版本




