find 用法

-name   filename             #查找名为filename的文件，大小写敏感
-iname                       #查找时文件名大小写不敏感
-perm                        #按执行权限来查找
-user    username             #按文件属主来查找
-group   groupname            #按组来查找
-mtime   -n +n                #按文件更改时间来查找文件，-n指n天以内，+n指n天以前
-atime    -n +n               #按文件访问时间来查GIN: 0px">
-ctime    -n +n              #按文件创建时间来查找文件，-n指n天以内，+n指n天以前
-nogroup                     #查无有效属组的文件，即文件的属组在/etc/groups中不存在
-nouser                     #查无有效属主的文件，即文件的属主在/etc/passwd中不存
-newer   f1 !f2              找文件，-n指n天以内，+n指n天以前 
-ctime    -n +n               #按文件创建时间来查找文件，-n指n天以内，+n指n天以前 
-nogroup                     #查无有效属组的文件，即文件的属组在/etc/groups中不存在
-nouser                      #查无有效属主的文件，即文件的属主在/etc/passwd中不存
-newer   f1 !f2               #查更改时间比f1新但比f2旧的文件
-type    b/d/c/p/l/f         #查是块设备、目录、字符设备、管道、符号链接、普通文件
-size      n[c]               #查长度为n块[或n字节]的文件
-depth                       #使查找在进入子目录前先行查找完本目录
-fstype                     #查更改时间比f1新但比f2旧的文件
-type    b/d/c/p/l/f         #查是块设备、目录、字符设备、管道、符号链接、普通文件
-size      n[c]               #查长度为n块[或n字节]的文件
-depth                       #使查找在进入子目录前先行查找完本目录
-fstype                      #查位于某一类型文件系统中的文件，这些文件系统类型通常可 在/etc/fstab中找到
-mount                       #查文件时不跨越文件系统mount点
-follow                      #如果遇到符号链接文件，就跟踪链接所指的文件
-cpio                %;      #查位于某一类型文件系统中的文件，这些文件系统类型通常可 在/etc/fstab中找到
-mount                       #查文件时不跨越文件系统mount点
-follow                      #如果遇到符号链接文件，就跟踪链接所指的文件
-cpio                        #对匹配的文件使用cpio命令，将他们备份到磁带设备中
-prune                       #忽略某个目录

在$HOME中查.txt文件并显示
$find   ~   -name   "*.txt"   -print    
在当天目录中查找.txt文件并显示
$find   .    -name   "*.txt"   -print
查以大写字母开头的文件
$find   .    -name   "[A-Z]*"   -print   
查以host开头的文件
$find   /etc   -name   "host*"   -print 
查以两个小写字母和两个数字开头的txt文件
$find   .   -name   "[a-z][a-z][0–9][0–9].txt" -print
查文件权限是775的文件
$find   .   -perm   755   -print
#查文件权限是007的文件并执行 ls -l 命令 其中{} 和 \ 中间有空格 -exec 和 -ok 相同，但是Ok会询问，得到y后执行
$find   .   -perm -007   -exec ls -l {} \;   
$find   .   -type d   -print
$find   .   ! -type  d -print 
$find   .   -type l  -print


2. 按文件时间属性查找：
-atime  -n[+n]: 找出文件访问时间在n日之内[之外]的文件。
-ctime  -n[+n]: 找出文件更改时间在n日之内[之外]的文件。
-mtime  -n[+n]: 找出修改数据时间在n日之内[之外]的文件。
-amin   -n[+n]: 找出文件访问时间在n分钟之内[之外]的文件。
-cmin   -n[+n]: 找出文件更改时间在n分钟之内[之外]的文件。
-mmin   -n[+n]: 找出修改数据时间在n分钟之内[之外]的文件。
$ find -ctime -2        #找出距此时2天之内创建的文件

4. 按文件所属的owner和group查找：
-user:      查找owner属于-user选项后面指定用户的文件。
! -user:    查找owner不属于-user选项后面指定用户的文件。
-group:   查找group属于-group选项后面指定组的文件。
! -group: 查找group不属于-group选项后面指定组的文件。
$ find . -user root     #搜索owner是root的文件

-size [+|-]n[cwbkMG] 查找文件打下为n文件。大小之后的字母表示单位，b-块（512字节）、 c表示字节、w-字（2字节）、k-千字节、M-兆字节、G-吉字节，
单位的默认值为b。加号表示大于指定大小，减号表示小于指定大小。如果需要查找介于两个大小之间的文件，可以重复设置-size参数两次，
一次使用加号+指定大于某一大小，一次使用减号-指定小于某一大小。

查找HOME目录下大于1M小于10M的文件
$ find ~ -size +1M -size -10M  
$ 查长度为100字节的文件
find   . -size 100c -print


跳过'src/emacs'和它下边的所有文件,列出其它发现的文件,执行下边的命令: 
1. find . -path './src/emacs' -prune -o -print
只查找当前目录下，不搜索任何当前目录下的所有子目录,最大深度为1
2. find . -maxdepth 1 -name "*sql"

find . ! -name "." -type d -prune -o -type f -name "*.zip" -print 

查询当天修改过的文件
find  ./  -mtime  -1  -type f  -exec  ls -l  {} \;
在目录中查找更改时间在n日以前的文件并删除它们
find . -type f -mtime +14 -exec rm {} \; 
在目录中查找更改时间在n日以前的文件并删除它们，在删除之前先给出提示
find . -name “*.log” -mtime +5 -ok rm {} \; 
查找文件移动到指定目录 
find . -name “*.log” -exec mv {} .. \; 
用exec选项执行cp命令 
find . -name “*.log” -exec cp {} test3 \; 
按文件权限属性查找：
-perm mode:   文件权限正好符合mode(mode为文件权限的八进制表示)。
-perm +mode: 文件权限部分符合mode。如命令参数为644(-rw-r--r--)，那么只要文件权限属性中有任何权限和644重叠，这样的文件均可以被选出。
-perm -mode:  文件权限完全符合mode。如命令参数为644(-rw-r--r--)，当644中指定的权限已经被当前文件完全拥有，同时该文件还拥有额外的权限属性，这样的文件可被选出。
$ find . -perm 644      #查找所有文件权限正好为644(-rw-r--r--)的文件。
$ find . -perm +444      #当前目录下没有文件的权限属于等于444(均为644)。    
$ find . -perm -444     #644所包含的权限完全覆盖444所表示的权限。
按更改时间比指定文件新或比文件旧的方式查找：
-newer file1 ! file2： 查找文件的更改日期比file1新，但是比file2老的文件。
find . -newer users1     #查找文件更改日期比users1新的文件，从上面结果可以看出，其余文件均符合要求。
$ find . ! -newer users2   #查找文件更改日期不比users1新的文件。
#查找文件更改日期比users2新，但是不比test.tar.bz2新的文件。
$ find . -newer users2 ! -newer test.tar.bz2

排除指定子目录查找：
-path pathname -prune:   避开指定子目录pathname查找。
需要说明的是，如果同时使用-depth选项，那么-prune将被find命令忽略。
#当前目录下，避开DontSearchPath子目录，搜索所有文件名为datafile*的文件。
#$ find . -path "./DontSearchPath" -prune -o -name "datafile*" -print

xargs命令:
该命令的主要功能是从输入中构建和执行shell命令。       
在使用find命令的-exec选项处理匹配到的文件时，find命令将所有匹配到的文件一起传递给exec执行。但有些系统对能够传递给exec的命令长度有限制，
这样在find命令运行几分钟之后，就会出现溢出错误。错误信息通常是“参数列太长”或“参数列溢出”。这就是xargs命令的用处所在，特别是与find命令一起使用。  
find命令把匹配到的文件传递给xargs命令，而xargs命令每次只获取一部分文件而不是全部，不像-exec选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，
并如此继续下去.在有些系统中，使用-exec选项会为处理每一个匹配到的文件而发起一个相应的进程，并非将匹配到的文件全部作为参数一次执行；
这样在有些情况下就会出现进程过多，系统性能下降的问题，因而效率不高；而使用xargs命令则只有一个进程。另外，在使用xargs命令时，究竟是一次获取所有的参数，
还是分批取得参数，以及每一次获取参数的数目都会根据该命令的选项及系统内核中相应的可调参数来确定。
 #查找当前目录下的每一个普通文件，然后使用xargs命令来测试它们分别属于哪类文件。
/> find . -type f -print | xargs file 
./users2:        ASCII text
./datafile3:      empty
./users:          ASCII text
./test.tar.bz2: bzip2 compressed data, block size = 900k
#回收当前目录下所有普通文件的执行权限。
/> find . -type f -print | xargs chmod a-x
#在当面目录下查找所有普通文件，并用grep命令在搜索到的文件中查找hostname这个词
/> find . -type f -print | xargs grep "hostname" 
#在整个系统中查找内存信息转储文件(core dump) ，然后把结果保存到/tmp/core.log 文件中。
/> find / -name "core" -print | xargs echo "" >/tmp/core.log 　

/> pgrep mysql | xargs kill -9　　#直接杀掉mysql的进程
[1]+  Killed                  mysql